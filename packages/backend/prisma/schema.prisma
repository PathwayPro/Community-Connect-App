generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EnumRole {
  USER
  ADMIN
  MENTOR
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                   Int                          @id @default(autoincrement())
  first_name           String                       @db.VarChar(255)
  middle_name          String?                      @db.VarChar(255)
  last_name            String                       @db.VarChar(255)
  email                String                       @unique @db.VarChar(255)
  password_hash        String                       @db.VarChar(255)
  dob                  String?                      @db.VarChar(255)
  show_dob             Boolean                      @default(false)
  arrival_in_canada    String?                      @db.VarChar(255)
  role                 users_roles                  @default(USER)
  verification_token   String?                      @db.VarChar(255) // Token for email verification
  email_verified       Boolean                      @default(false) // Whether the email has been verified
  refresh_token        String?                      @db.VarChar(255)
  last_logout          DateTime?
  languages            String?
  profession           String?
  experience           String?
  bio                  String?
  picture_upload_link  String?
  resume_upload_link   String?
  linkedin_link        String?
  github_link          String?
  twitter_link         String?
  portfolio_link       String?
  other_links          String?
  additional_links     String[]
  province             String?
  city                 String?
  // MENTOR RELATIONSHIP
  mentor               mentors?
  // EVENTS MANAGERS RELATIONSHIP
  event_manager        EventsManagers[]
  // EVENTS SUBSCRIPTIONS RELATIONSHIP
  subscriptions        EventsSubscriptions[]
  subscription_updates EventsSubscriptionsUpdates[]
  //EVENTS INVITATIONS RELATIONSHIP
  event_inviter        EventsInvitations[]          @relation(name: "EventInvitationInviter")
  event_invitee        EventsInvitations[]          @relation(name: "EventInvitationInvitee")
  // NEWS RELATIONSHIP
  news                 News[]
  //RESOURCES RELATIONSHIP
  resources            Resources[]
  // GOALS RELATIONSHIP
  goal                 UsersGoals?                   @relation(fields: [goal_id], references: [id])
  goal_id              Int?
  // INTERESTS RELATIONSHIP
  interests            UsersInterests[]
  // NETWORKING - CONNECTION REQUESTS
  connection_request_sender_id        ConnectionRequests[]          @relation(name: "ConnectionRequestsSender")
  connection_request_recipient_id        ConnectionRequests[]          @relation(name: "ConnectionRequestsRecipient")
  // NETWORKING - CONNECTED USERS
  connected_sender_id        ConnectedUsers[]          @relation(name: "ConnectedUsersSender")
  connected_recipient_id        ConnectedUsers[]          @relation(name: "ConnectedUsersRecipient")
  // NETWORKING - MESSAGES
  messages_sender_id        Messages[]          @relation(name: "MessagesSender")
  messages_recipient_id        Messages[]          @relation(name: "MessagesRecipient")

}

enum users_roles {
  USER
  MENTOR
  ADMIN
}

model mentors {
  id                 Int            @id @default(autoincrement())
  resume             String
  max_mentees        Int
  availability       String
  profession         String
  experience_years   Int
  experience_details String?
  // STATUS ENUM
  status             mentors_status @default(PENDING)
  // USER RELATIONSHIP
  user               users          @relation(fields: [user_id], references: [id])
  user_id            Int            @unique
}

enum mentors_status {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

// EVENTS FLOW
model Events {
  id                    Int                   @id @default(autoincrement())
  title                 String
  description           String
  location              String?
  link                  String?
  image                 String?
  is_free               Boolean               @default(true)
  type                  EventsTypes           @default(PUBLIC)
  requires_confirmation Boolean               @default(false) // IF SUBSCRIPTIONS ARE ACCEPTED DIRECTLY OR IF THEY REQUIRE AN APPROVAL AFTER REVIEW
  accept_subscriptions  Boolean               @default(true) // IF USERS CAN STILL SUBSCRIBE TO THE EVENT OR IS FULL
  created_at            DateTime              @default(now())
  updated_at            DateTime              @default(now())
  start_date            DateTime              @default(now())
  end_date              DateTime              @default(now())
  // RELATIONSHIPS
  category              EventsCategories      @relation(fields: [category_id], references: [id])
  category_id           Int
  dates                 EventsDates[]
  speakers              eventsSpeakers[]
  managers              EventsManagers[]
  subscriptions         EventsSubscriptions[]
  invitations           EventsInvitations[]
}

enum EventsTypes {
  PUBLIC // THESE EVENTS WILL SHOW UP IN REGULAR SEARCH WITHOUT PERMISSIONS REQUIRED
  PRIVATE // THESE EVENTS ONLY SHOW UP IN SEARCHES FROM ADMINS, MENTOR (MANAGERS) AND INVITED USERS
}

model EventsCategories {
  id     Int      @id @default(autoincrement())
  name   String
  events Events[]
}

model EventsDates {
  id                   Int                  @id @default(autoincrement())
  event                Events               @relation(fields: [event_id], references: [id])
  event_id             Int
  start                DateTime             @default(now())
  end                  DateTime             @default(now())
  status               EventsDatesStatus    @default(READY)
  events_dates_updates EventsDatesUpdates[]
}

model EventsDatesUpdates {
  id            Int               @id @default(autoincrement())
  event_date    EventsDates       @relation(fields: [event_date_id], references: [id])
  event_date_id Int
  prev_status   EventsDatesStatus
  new_status    EventsDatesStatus
  message       String
}

enum EventsDatesStatus {
  READY
  IN_PROGRESS
  RESCHEDULED
  CANCELED
}

model eventsSpeakers {
  id          Int    @id @default(autoincrement())
  event       Events @relation(fields: [event_id], references: [id])
  event_id    Int
  name        String
  description String
}

model EventsManagers {
  id         Int     @id @default(autoincrement())
  user       users   @relation(fields: [user_id], references: [id])
  user_id    Int
  event      Events  @relation(fields: [event_id], references: [id])
  event_id   Int
  is_speaker Boolean @default(false)
}

model EventsSubscriptions {
  id         Int                          @id @default(autoincrement())
  user       users                        @relation(fields: [user_id], references: [id])
  user_id    Int
  event      Events                       @relation(fields: [event_id], references: [id])
  event_id   Int
  status     EventsSubscriptionsStatus    @default(PENDING)
  created_at DateTime                     @default(now())
  updated_at DateTime                     @default(now())
  updates    EventsSubscriptionsUpdates[]
}

model EventsSubscriptionsUpdates {
  id              Int                       @id @default(autoincrement())
  subscription    EventsSubscriptions       @relation(fields: [subscription_id], references: [id])
  subscription_id Int
  prev_status     EventsSubscriptionsStatus
  new_status      EventsSubscriptionsStatus
  message         String
  created_at      DateTime                  @default(now())
  updater         users                     @relation(fields: [updated_by], references: [id])
  updated_by      Int
}

enum EventsSubscriptionsStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
}

model EventsInvitations {
  id         Int      @id @default(autoincrement())
  inviter    users    @relation(name: "EventInvitationInviter", fields: [inviter_id], references: [id])
  inviter_id Int
  invitee    users    @relation(name: "EventInvitationInvitee", fields: [invitee_id], references: [id])
  invitee_id Int
  event      Events   @relation(fields: [event_id], references: [id])
  event_id   Int
  message    String
  created_at DateTime @default(now())
}

// NEWS
enum NewsType {
  FEATURED_POST
  EDITORS_PICK
}

model News {
  id         Int      @id @default(autoincrement())
  title      String
  details    String
  type       NewsType
  link       String
  image      String?
  published  Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  user       users    @relation(fields: [user_id], references: [id])
  user_id    Int
}

// RESOURCES
model Resources {
  id         Int      @id @default(autoincrement())
  title      String
  link       String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  user       users    @relation(fields: [user_id], references: [id])
  user_id    Int
}

// GOALS
model UsersGoals {
  id    Int     @id @default(autoincrement())
  name  String
  users users[]
}

// INTERESTS
model Interests {
  id    Int              @id @default(autoincrement())
  name  String
  users UsersInterests[]
}

model UsersInterests {
  user_id     Int
  user        users     @relation(fields: [user_id], references: [id])
  interest_id Int
  interest    Interests @relation(fields: [interest_id], references: [id])

  @@id([user_id, interest_id])
}

// USERS NETWORKING
enum ConnectionRequestsStatus {
  PENDING
  APPROVED
  REJECTED
}

model ConnectionRequests {
  id              Int                       @id @default(autoincrement())
  sender_id       Int
  sender          users                     @relation(name: "ConnectionRequestsSender", fields: [sender_id], references: [id])
  recipient_id    Int
  recipient       users                     @relation(name: "ConnectionRequestsRecipient", fields: [recipient_id], references: [id])
  message         String?
  status          ConnectionRequestsStatus  @default(PENDING)
  created_at      DateTime                  @default(now())
  updated_at      DateTime?
}

model ConnectedUsers {
  sender_id       Int
  sender          users                     @relation(name: "ConnectedUsersSender", fields: [sender_id], references: [id])
  recipient_id    Int
  recipient       users                     @relation(name: "ConnectedUsersRecipient", fields: [recipient_id], references: [id])
  created_at      DateTime                  @default(now())
  @@id([sender_id, recipient_id])
}

model Messages {
  id              Int                       @id @default(autoincrement())
  sender_id       Int
  sender          users                     @relation(name: "MessagesSender", fields: [sender_id], references: [id])
  recipient_id    Int
  recipient       users                     @relation(name: "MessagesRecipient", fields: [recipient_id], references: [id])
  message         String?
  created_at      DateTime                  @default(now())
}